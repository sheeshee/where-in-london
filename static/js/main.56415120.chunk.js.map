{"version":3,"sources":["components/ControlPanel.js","components/Mapper.js","components/ColorGradient.js","App.js","reportWebVitals.js","index.js"],"names":["ColorBar","items","i","push","className","style","backgroundColor","this","props","gradient","colorFromRank","Math","round","minValue","maxValue","Component","ControlPanel","boroughName","boroughSize","bounds","latLngBounds","latLng","Mapper","feature","fillColor","colorFromValue","properties","area_hectares","weight","opacity","color","dashArray","fillOpacity","onEachFeature","layer","on","mouseover","highlightFeature","bind","mouseout","resetHighlight","click","clickOnFeature","e","target","updateBoroughName","name","updateBoroughSize","setStyle","geojsonRef","current","leafletElement","resetStyle","console","log","React","createRef","state","lat","lng","zoom","position","Map","center","minZoom","maxBounds","TileLayer","attribution","url","GeoJSON","ref","data","ColorGradient","array","getRank","value","rank","concat","colorAt","max","min","Rainbow","setSpectrum","areas","features","map","f","parseFloat","App","setState","selectedBoroughName","selectedBoroughSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56415120.chunk.js","sourcesContent":["import './Control.css'\nimport { Component } from 'react'\n\n\n\nclass ColorBar extends Component {\n\n    render(){\n        const items = []\n        for (var i = 0; i < 100; i++){\n            items.push(<div key={i} className=\"colorbar-segment\" style={{backgroundColor: this.props.gradient.colorFromRank(i)}}></div>)\n        }\n        return(\n            <div className=\"colorbar-container\">\n                <div className=\"colorbar-labels\">\n                    <div className=\"minimum\">{Math.round(this.props.gradient.minValue)}</div>\n                    <div className=\"maximum\">{Math.round(this.props.gradient.maxValue)}</div>\n                    <div className=\"unit\">hectares</div>\n                </div>\n                <div >\n                    {items}\n                </div>\n            </div>\n        )\n    }\n}\n\nclass ControlPanel extends Component {\n    render(){\n        return(\n            <div className=\"control\">\n                <div>\n                    {this.props.boroughName ? this.props.boroughName + \": \" + this.props.boroughSize + \" hectares\": \"\" }\n                </div>\n                {/* <button className=\"btn btn-primary\">Show Map</button> */}\n                <ColorBar gradient={this.props.gradient}/>\n            </div>\n        )\n    }\n}\n\nexport default ControlPanel;\n","import { latLngBounds, latLng } from 'leaflet';\nimport React, { Component } from 'react'\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\n\nconst bounds = latLngBounds(\n    latLng(51.0, -1), latLng(52.0, 1)\n)\n\nclass Mapper extends Component {\n    constructor(props){\n        super(props);\n        this.geojsonRef = React.createRef();\n        this.state = {\n            lat: 51.505,\n            lng: -0.09,\n            zoom: 10,\n          }\n    }\n\n    style = feature => {\n        var color = this.props.gradient.colorFromValue(feature.properties.area_hectares)\n        return {\n            fillColor: color,\n            weight: 2,\n            opacity: 0.5,\n            color: \"black\",\n            dashArray: \"10\",\n            fillOpacity: 0.8\n        }\n    }\n\n    onEachFeature = (feature, layer) => {\n        layer.on({\n          mouseover: this.highlightFeature.bind(this),\n          mouseout: this.resetHighlight.bind(this),\n          click: this.clickOnFeature.bind(this)\n        });\n    }\n\n    highlightFeature = (e) => {\n        var layer = e.target;\n        this.props.updateBoroughName(layer.feature.properties.name)\n        this.props.updateBoroughSize(layer.feature.properties.area_hectares)\n        layer.setStyle({\n            fillOpacity: 1\n        })\n    }\n\n    resetHighlight = (e) => {\n        this.props.updateBoroughName(\"\")\n        this.geojsonRef.current.leafletElement.resetStyle(e.target)\n    }\n\n    clickOnFeature = (e) => {\n        var layer = e.target;\n        console.log(\"Clicked on \" + layer.feature.properties.name)\n    }\n\n    render(){\n        const position =[this.state.lat, this.state.lng]\n        return(\n            <Map\n                center={position}\n                zoom={this.state.zoom}\n                minZoom={10}\n                maxBounds={bounds}\n            >\n            <TileLayer\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <GeoJSON\n                ref={this.geojsonRef}\n                data={this.props.data}\n                style={this.style}\n                onEachFeature={this.onEachFeature.bind(this)}\n            />\n            </Map>\n        )\n    }\n}\n\nexport default Mapper;\n","import Rainbow from 'rainbowvis.js'\n\nconst colorLow = \"green\"\nconst colorHigh = \"red\"\n\nclass ColorGradient {\n    constructor(array){\n        // get min and max of data\n        this.maxValue = Math.max(...array);\n        this.minValue = Math.min(...array);\n        this.gradient = new Rainbow();\n        this.gradient.setSpectrum(colorLow, colorHigh)\n    }\n\n    getRank = value => {\n        // x100 because default range of Color Gradient is 100.\n        let rank = (value - this.minValue)/(this.maxValue - this.minValue) * 100\n        return rank\n    }\n\n    colorFromValue = value => {\n        let rank = this.getRank(value)\n        return this.colorFromRank(rank)\n    }\n\n    colorFromRank = rank => {\n        return \"#\".concat(this.gradient.colorAt(rank))\n    }\n\n}\n\nexport default ColorGradient;\n","import './App.css';\n\nimport React, { Component } from 'react'\nimport ControlPanel from './components/ControlPanel'\nimport Mapper from './components/Mapper'\nimport ColorGradient from './components/ColorGradient'\n\n// downloaded data from here:\n// https://skgrange.github.io/data.html\nimport data from './data/london_boroughs.json'\n\nvar areas = data.features.map(f => parseFloat(f.properties.area_hectares));\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.updateBoroughName = this.updateBoroughName.bind(this)\n    this.updateBoroughSize = this.updateBoroughSize.bind(this)\n    this.state = {\n      selectedBoroughName: \"\",\n      selectedBoroughSize: 0,\n    }\n  }\n\n  updateBoroughName = ( boroughName ) => {\n    this.setState({\n      selectedBoroughName: boroughName\n    })\n  }\n\n  updateBoroughSize = ( boroughSize ) => {\n    this.setState({\n      selectedBoroughSize: boroughSize\n    })\n  }\n\n render(){\n  var gradient = new ColorGradient(areas)\n  return (\n    <div>\n    <Mapper\n      gradient={gradient}\n      data={data}\n      updateBoroughName={this.updateBoroughName}\n      updateBoroughSize={this.updateBoroughSize}\n    />\n    <ControlPanel\n      boroughName={this.state.selectedBoroughName}\n      boroughSize={this.state.selectedBoroughSize}\n      gradient={gradient}\n    />\n    </div>\n   )\n }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}