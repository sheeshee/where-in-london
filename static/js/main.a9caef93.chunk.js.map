{"version":3,"sources":["components/Plot.js","components/ControlPanel.js","components/Mapper.js","components/ColorGradient.js","App.js","reportWebVitals.js","index.js"],"names":["asPoundSterling","value","groups","toString","reverse","join","match","cleanKey","name","replace","Plot","this","props","hoveredBorough","hoverLine","boroughLines","selectedBoroughs","map","borough","index","dataKey","dot","stroke","boroughColours","isAnimationActive","includes","getHoveredBorough","className","data","width","height","type","tickFormatter","Component","InteractionPrompt","content","style","backgroundColor","length","onClick","clearBoroughList","PlottedBoroughList","ControlPanel","state","fetch","process","then","response","json","setState","console","log","catch","error","href","bounds","latLngBounds","latLng","Mapper","feature","fillColor","properties","weight","opacity","color","fillOpacity","getColor","gradient","colorFromValue","onEachFeature","layer","on","mouseover","highlightFeature","bind","mouseout","resetHovered","click","clickOnFeature","e","target","updateHoveredBorough","setHighlight","setStyle","updateSelectedBoroughs","geojsonRef","React","createRef","lat","lng","zoom","position","Map","center","minZoom","maxBounds","TileLayer","attribution","url","GeoJSON","ref","ColorGradient","array","getRank","minValue","maxValue","rank","colorFromRank","concat","colorAt","Math","max","min","Rainbow","setSpectrum","App","clickedBorough","boroughs","filter","item","push","prices","features","f","parseFloat","latest_average_price","controlPanel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9caef93.chunk.js","sourcesContent":["import './Plot.css';\nimport { CartesianGrid, Line, LineChart, XAxis, YAxis } from 'recharts';\nimport { Component } from 'react';\n\nfunction asPoundSterling(value){\n    var groups = [...value.toString()].reverse().join(\"\").match(/.{1,3}/g);\n    var label = [...groups.join(',')].reverse().join(\"\")\n    return 'Â£' + label\n}\n\n\nfunction cleanKey(name){\n    return name.replace(' and ', ' & ')\n}\n\nclass Plot extends Component {\n\n    getHoveredBorough(){\n        if(this.props.hoveredBorough){\n            return cleanKey(this.props.hoveredBorough)\n        } else {\n            return null\n        }\n    }\n\n    render(){\n        var boroughLines = this.props.selectedBoroughs.map(\n            (borough, index) => {\n                return (\n                    <Line\n                        key={index}\n                        dataKey={cleanKey(borough)}\n                        dot={false}\n                        stroke={this.props.boroughColours[cleanKey(borough)]}\n                        isAnimationActive={false}\n                    />\n                )\n            }\n        )\n        var hoverLine;\n        if(!this.props.selectedBoroughs.includes(this.getHoveredBorough)){\n            hoverLine = <Line\n                key='hover'\n                dataKey={this.getHoveredBorough()}\n                dot={false}\n                stroke={'lightgrey'}\n                isAnimationActive={false}\n            />\n        }\n        return (\n            <div className=\"plot\">\n            { this.props.data ?\n                <LineChart width={400} height={200} //margin={{left: 40, right: 50, top: 25}}\n                    data={this.props.data} >\n                    {hoverLine}\n                    {boroughLines}\n                    <CartesianGrid />\n                    <XAxis\n                        dataKey=\"date\"\n                    />\n                    <YAxis\n                        type=\"number\"\n                        tickFormatter={asPoundSterling}\n                    />\n                </LineChart>\n            :\n                <div>Loading...</div>\n            }\n            </div>\n        )\n    }\n}\n\nexport default Plot;\n","import './Control.css';\nimport { Component } from 'react';\nimport Plot from './Plot';\n\n\nclass InteractionPrompt extends Component {\n    render(){\n        var content;\n        if(this.props.hoveredBorough && !this.props.selectedBoroughs.includes(this.props.hoveredBorough)){\n            content = <div >Click now to add <span className=\"borough-add\">{this.props.hoveredBorough}</span>.</div>\n        } else if (this.props.hoveredBorough && this.props.selectedBoroughs.includes(this.props.hoveredBorough)){\n            content = <div>Click now to remove <span\n                    style={{backgroundColor: this.props.boroughColours[this.props.hoveredBorough]}}\n                >{this.props.hoveredBorough}</span>.</div>\n        } else if (this.props.selectedBoroughs.length > 0) {\n            content = <div className=\"clear-borough-prompt\" onClick={this.props.clearBoroughList}>Click here to clear the plot.</div>\n        } else {\n            content = <div>Click on a borough to add its plot.</div>\n        }\n        return(\n            <div className=\"interaction-prompt\">\n                {content}\n            </div>\n        )\n    }\n}\n\nclass PlottedBoroughList extends Component {\n    render(){\n        var selectedBoroughs = this.props.selectedBoroughs.map(\n            (borough, index) => {\n                return (\n                    <span\n                        key={index}\n                        style={{backgroundColor: this.props.boroughColours[borough]}}\n                    >\n                        {borough}\n                    </span>\n                )\n            }\n        )\n        return (\n            <div className=\"selected-boroughs-list\">\n                <span className=\"mobile-clear\" onClick={this.props.clearBoroughList}>Clear All</span>\n                {selectedBoroughs}\n            </div>\n        )\n    }\n}\n\nclass ControlPanel extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data: null,\n        }\n    }\n\n    componentDidMount(){\n        fetch(process.env.PUBLIC_URL + '/data/average-house-prices.json')\n            .then( response => response.json() )\n            .then( data => {\n                this.setState({data: data});\n                console.log(\"Loaded price data!\");\n            })\n            .catch( error => console.error('Could not load data:\\n', error))\n    }\n\n    render(){\n        return(\n            <div className=\"control-box\">\n                <h1>Average House Sale Prices in London</h1>\n                <div className=\"subtitle-container\">\n                    <h2><a href=\"https://data.london.gov.uk/dataset/uk-house-price-index\">Data Source</a></h2>\n                    <h2><a href=\"https://github.com/sheeshee/where-in-london\">View on GitHub</a></h2>\n                </div>\n                <Plot\n                    data={this.state.data}\n                    hoveredBorough={this.props.hoveredBorough}\n                    selectedBoroughs={this.props.selectedBoroughs}\n                    boroughColours={this.props.boroughColours}\n                />\n                <PlottedBoroughList\n                        selectedBoroughs={this.props.selectedBoroughs}\n                        boroughColours={this.props.boroughColours}\n                        clearBoroughList={this.props.clearBoroughList}\n                    />\n                <InteractionPrompt\n                    selectedBoroughs={this.props.selectedBoroughs}\n                    hoveredBorough={this.props.hoveredBorough}\n                    boroughColours={this.props.boroughColours}\n                    clearBoroughList={this.props.clearBoroughList}\n                />\n            </div>\n        )\n    }\n}\n\nexport default ControlPanel;\n","import { latLngBounds, latLng } from 'leaflet';\nimport React, { Component } from 'react'\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\n\nconst bounds = latLngBounds(\n    latLng(50.0, -3), latLng(53.0, 3)\n)\n\nconst idleOpacity = 0;\nconst hoverOpacity = 0.5;\nconst activeOpacity = 0.8;\n\nclass Mapper extends Component {\n    constructor(props){\n        super(props);\n        this.geojsonRef = React.createRef();\n        this.state = {\n            lat: 51.505,\n            lng: -0.1278,\n            zoom: 9,\n          }\n    }\n\n    style = feature => {\n        // var color = this.getColor(feature.properties.latest_average_price)\n        var color = this.props.boroughColours[feature.properties.name];\n        return {\n            fillColor: color,\n            weight: 2,\n            opacity: 0.5,\n            color: \"black\",\n            // dashArray: \"10\",\n            fillOpacity: this.props.selectedBoroughs.includes(feature.properties.name) ? activeOpacity : idleOpacity\n        }\n    }\n\n    getColor = value => {\n        try {\n            return this.props.gradient.colorFromValue(value)\n        } catch (error) {\n            console.error(\"Could not get a color value!\\n\", error)\n            return 0;\n        }\n    }\n\n    onEachFeature = (feature, layer) => {\n        layer.on({\n          mouseover: this.highlightFeature.bind(this),\n          mouseout: this.resetHovered.bind(this),\n          click: this.clickOnFeature.bind(this)\n        });\n    }\n\n    highlightFeature = (e) => {\n        var layer = e.target;\n        this.props.updateHoveredBorough(layer.feature.properties.name)\n        this.setHighlight(layer)\n    }\n\n    setHighlight = (layer) => {\n        layer.setStyle({\n            fillOpacity: this.props.selectedBoroughs.includes(layer.feature.properties.name) ? activeOpacity : hoverOpacity\n        })\n    }\n\n    resetHovered = (e) => {\n        this.props.updateHoveredBorough(\"\")\n    }\n\n    clickOnFeature = (e) => {\n        var layer = e.target;\n        this.props.updateSelectedBoroughs(layer.feature.properties.name);\n        this.setHighlight(layer) // added this line to keep layer from being un-highlighted on click\n    }\n\n    render(){\n        const position =[this.state.lat, this.state.lng]\n        return(\n            <Map\n                center={position}\n                zoom={this.state.zoom}\n                minZoom={9}\n                maxBounds={bounds}\n            >\n            <TileLayer\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            { this.props.data ?\n            <GeoJSON\n                ref={this.geojsonRef}\n                data={this.props.data}\n                style={this.style}\n                onEachFeature={this.onEachFeature.bind(this)}\n            /> : null}\n            </Map>\n        )\n    }\n}\n\nexport default Mapper;\n","import Rainbow from 'rainbowvis.js'\n\nconst colorLow = \"green\"\nconst colorHigh = \"red\"\n\nclass ColorGradient {\n    constructor(array){\n        // get min and max of data\n        this.maxValue = Math.max(...array);\n        this.minValue = Math.min(...array);\n        this.gradient = new Rainbow();\n        this.gradient.setSpectrum(colorLow, colorHigh)\n    }\n\n    getRank = value => {\n        // x100 because default range of Color Gradient is 100.\n        let rank = (value - this.minValue)/(this.maxValue - this.minValue) * 100\n        return rank\n    }\n\n    colorFromValue = value => {\n        let rank = this.getRank(value)\n        return this.colorFromRank(rank)\n    }\n\n    colorFromRank = rank => {\n        return \"#\".concat(this.gradient.colorAt(rank))\n    }\n\n}\n\nexport default ColorGradient;\n","import './App.css';\n\nimport React, { Component } from 'react'\nimport ControlPanel from './components/ControlPanel'\nimport Mapper from './components/Mapper'\nimport ColorGradient from './components/ColorGradient'\n\nimport boroughColours from './components/borough-hex.json'\n\n// downloaded data from here:\n// https://skgrange.github.io/data.html\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.updateHoveredBorough = this.updateHoveredBorough.bind(this)\n    this.updateSelectedBoroughs = this.updateSelectedBoroughs.bind(this)\n    this.clearBoroughList = this.clearBoroughList.bind(this)\n    this.state = {\n      hoveredBorough: \"\",\n      selectedBoroughs: [],\n      data: null,\n      prices: null\n    }\n    console.log('App Constructed')\n  }\n\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/data/london_boroughs.json')\n    .then( response => response.json() )\n    .then( data => {\n      console.log('Loaded boroughs!');\n      var prices = data.features.map(f => parseFloat(f.properties.latest_average_price));\n      this.setState({data: data, prices: prices})\n    })\n    .catch(error => console.error('Failed to load data:\\n', error))\n  }\n\n  updateHoveredBorough = ( hoveredBorough ) => {\n    this.setState({\n      hoveredBorough: hoveredBorough\n    })\n  }\n\n  updateSelectedBoroughs = ( clickedBorough ) => {\n    var boroughs = this.state.selectedBoroughs;\n    if( boroughs.includes(clickedBorough)){\n      // remove the borough from the list of selected ones\n      boroughs = boroughs.filter(item => item !== clickedBorough)\n    } else {\n      boroughs.push(clickedBorough)\n    }\n    this.setState({ selectedBoroughs: boroughs })\n  }\n\n  clearBoroughList = () => {\n    this.setState({ selectedBoroughs: []})\n  }\n\n render(){\n   if(this.state.data){\n    var gradient = new ColorGradient(this.state.prices)\n    var controlPanel =\n      <ControlPanel\n        hoveredBorough={this.state.hoveredBorough}\n        selectedBoroughs={this.state.selectedBoroughs}\n        gradient={gradient}\n        boroughColours={boroughColours}\n        clearBoroughList={this.clearBoroughList}\n      />\n\n   }\n  return (\n    <div>\n      {controlPanel}\n      <Mapper\n        gradient={gradient}\n        data={this.state.data}\n        updateHoveredBorough={this.updateHoveredBorough}\n        updateSelectedBoroughs={this.updateSelectedBoroughs}\n        selectedBoroughs={this.state.selectedBoroughs}\n        boroughColours={boroughColours}\n      />\n\n    </div>\n   )\n }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}