{"version":3,"sources":["components/Plot.js","components/ControlPanel.js","components/Mapper.js","components/ColorGradient.js","App.js","reportWebVitals.js","index.js"],"names":["asPoundSterling","value","groups","toString","reverse","join","match","Plot","className","this","props","data","width","height","margin","left","right","top","dataKey","boroughKey","dot","type","tickFormatter","Component","ControlPanel","state","fetch","process","then","response","json","setState","console","log","catch","error","boroughName","replace","bounds","latLngBounds","latLng","Mapper","style","feature","fillColor","gradient","colorFromValue","properties","latest_average_price","weight","opacity","color","dashArray","fillOpacity","onEachFeature","layer","on","mouseover","highlightFeature","bind","mouseout","resetHighlight","click","clickOnFeature","e","target","updateBoroughName","name","updateBoroughSize","setStyle","geojsonRef","current","leafletElement","resetStyle","React","createRef","lat","lng","zoom","position","Map","center","minZoom","maxBounds","TileLayer","attribution","url","GeoJSON","ref","ColorGradient","array","getRank","minValue","maxValue","rank","colorFromRank","concat","colorAt","Math","max","min","Rainbow","setSpectrum","App","selectedBoroughName","boroughSize","selectedBoroughSize","areas","features","map","f","parseFloat","controlPanel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d05ca487.chunk.js","sourcesContent":["import './Plot.css';\nimport { CartesianGrid, Line, LineChart, XAxis, YAxis } from 'recharts';\nimport { Component } from 'react';\n\nfunction asPoundSterling(value){\n    var groups = [...value.toString()].reverse().join(\"\").match(/.{1,3}/g);\n    var label = [...groups.join(',')].reverse().join(\"\")\n    return 'Â£' + label\n}\nclass Plot extends Component {\n\n    render(){\n        return (\n            <div className=\"plot\">\n            { this.props.data ?\n                <LineChart width={375} height={200} margin={{left: 40, right: 50, top: 25}}\n                    data={this.props.data} >\n                    <Line dataKey={this.props.boroughKey} dot={false} />\n                    <CartesianGrid />\n                    <XAxis\n                        dataKey=\"date\"\n                        // interval=\"preserveStartEnd\"\n                        // tickCount={12}\n                    />\n                    <YAxis\n                        type=\"number\"\n                        tickFormatter={asPoundSterling}\n                    />\n                </LineChart>\n            :\n                <div>Loading...</div>\n            }\n            </div>\n        )\n    }\n}\n\nexport default Plot;\n","import './Control.css';\nimport { Component } from 'react';\nimport Plot from './Plot';\n\nfunction cleanKey(boroughName){\n    return boroughName.replace(' and ', ' & ')\n}\n\nclass ControlPanel extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data: null,\n        }\n    }\n\n    componentDidMount(){\n        fetch(process.env.PUBLIC_URL + '/data/average-house-prices.json')\n            .then( response => response.json() )\n            .then( data => {\n                this.setState({data: data});\n                console.log(\"Loaded price data!\");\n            })\n            .catch( error => console.error('Could not load data:\\n', error))\n    }\n\n    render(){\n        return(\n            <div className=\"control-box\">\n                <Plot data={this.state.data} boroughKey={cleanKey(this.props.boroughName)}/>\n                <div>\n                    {this.props.boroughName ? this.props.boroughName : \"Hover over a borough to display its graph.\" }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ControlPanel;\n","import { latLngBounds, latLng } from 'leaflet';\nimport React, { Component } from 'react'\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\n\nconst bounds = latLngBounds(\n    latLng(51.0, -1), latLng(52.0, 1)\n)\n\nclass Mapper extends Component {\n    constructor(props){\n        super(props);\n        this.geojsonRef = React.createRef();\n        this.state = {\n            lat: 51.505,\n            lng: -0.09,\n            zoom: 10,\n          }\n    }\n\n    style = feature => {\n        var color = this.props.gradient.colorFromValue(feature.properties.latest_average_price)\n        return {\n            fillColor: color,\n            weight: 2,\n            opacity: 0.5,\n            color: \"black\",\n            dashArray: \"10\",\n            fillOpacity: 0.8\n        }\n    }\n\n    onEachFeature = (feature, layer) => {\n        layer.on({\n          mouseover: this.highlightFeature.bind(this),\n          mouseout: this.resetHighlight.bind(this),\n          click: this.clickOnFeature.bind(this)\n        });\n    }\n\n    highlightFeature = (e) => {\n        var layer = e.target;\n        this.props.updateBoroughName(layer.feature.properties.name)\n        this.props.updateBoroughSize(layer.feature.properties.latest_average_price)\n        layer.setStyle({\n            fillOpacity: 1\n        })\n    }\n\n    resetHighlight = (e) => {\n        this.props.updateBoroughName(\"\")\n        this.geojsonRef.current.leafletElement.resetStyle(e.target)\n    }\n\n    clickOnFeature = (e) => {\n        var layer = e.target;\n        console.log(\"Clicked on \" + layer.feature.properties.name)\n    }\n\n    render(){\n        const position =[this.state.lat, this.state.lng]\n        return(\n            <Map\n                center={position}\n                zoom={this.state.zoom}\n                minZoom={10}\n                maxBounds={bounds}\n            >\n            <TileLayer\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            { this.props.data ?\n            <GeoJSON\n                ref={this.geojsonRef}\n                data={this.props.data}\n                style={this.style}\n                onEachFeature={this.onEachFeature.bind(this)}\n            /> : null}\n            </Map>\n        )\n    }\n}\n\nexport default Mapper;\n","import Rainbow from 'rainbowvis.js'\n\nconst colorLow = \"green\"\nconst colorHigh = \"red\"\n\nclass ColorGradient {\n    constructor(array){\n        // get min and max of data\n        this.maxValue = Math.max(...array);\n        this.minValue = Math.min(...array);\n        this.gradient = new Rainbow();\n        this.gradient.setSpectrum(colorLow, colorHigh)\n    }\n\n    getRank = value => {\n        // x100 because default range of Color Gradient is 100.\n        let rank = (value - this.minValue)/(this.maxValue - this.minValue) * 100\n        return rank\n    }\n\n    colorFromValue = value => {\n        let rank = this.getRank(value)\n        return this.colorFromRank(rank)\n    }\n\n    colorFromRank = rank => {\n        return \"#\".concat(this.gradient.colorAt(rank))\n    }\n\n}\n\nexport default ColorGradient;\n","import './App.css';\n\nimport React, { Component } from 'react'\nimport ControlPanel from './components/ControlPanel'\nimport Mapper from './components/Mapper'\nimport ColorGradient from './components/ColorGradient'\n\n// downloaded data from here:\n// https://skgrange.github.io/data.html\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.updateBoroughName = this.updateBoroughName.bind(this)\n    this.updateBoroughSize = this.updateBoroughSize.bind(this)\n    this.state = {\n      selectedBoroughName: \"\",\n      selectedBoroughSize: 0,\n      data: null,\n      areas: null\n    }\n    console.log('App Constructed')\n  }\n\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + '/data/london_boroughs.json')\n    .then( response => response.json() )\n    .then( data => {\n      console.log('Loaded boroughs!');\n      var areas = data.features.map(f => parseFloat(f.properties.latest_average_price));\n      this.setState({data: data, areas: areas})\n    })\n    .catch(error => console.error('Failed to load data:\\n', error))\n  }\n\n  updateBoroughName = ( boroughName ) => {\n    this.setState({\n      selectedBoroughName: boroughName\n    })\n  }\n\n  updateBoroughSize = ( boroughSize ) => {\n    this.setState({\n      selectedBoroughSize: boroughSize\n    })\n  }\n\n render(){\n   if(this.state.data){\n    var gradient = new ColorGradient(this.state.areas)\n    var controlPanel =\n      <ControlPanel\n        boroughName={this.state.selectedBoroughName}\n        boroughSize={this.state.selectedBoroughSize}\n        gradient={gradient}\n      />\n\n   }\n  return (\n    <div>\n      {controlPanel}\n      <Mapper\n        gradient={gradient}\n        data={this.state.data}\n        updateBoroughName={this.updateBoroughName}\n        updateBoroughSize={this.updateBoroughSize}\n      />\n\n    </div>\n   )\n }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}